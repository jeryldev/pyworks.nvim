*pyworks.txt*  Python environments tailored for Neovim

==============================================================================
CONTENTS                                                    *pyworks-contents*

1. Introduction ............................................. |pyworks-intro|
2. Requirements ............................................. |pyworks-requirements|
3. Installation ............................................. |pyworks-installation|
4. Commands ................................................. |pyworks-commands|
5. Configuration ............................................ |pyworks-config|
6. Workflow ................................................. |pyworks-workflow|
7. Project Types ............................................ |pyworks-projects|
8. Cell Navigation .......................................... |pyworks-cells|
9. Integration .............................................. |pyworks-integration|
10. Troubleshooting ......................................... |pyworks-troubleshooting|

==============================================================================
1. INTRODUCTION                                                *pyworks-intro*

pyworks.nvim is a comprehensive Python project management plugin for Neovim
that handles virtual environments, package installation, and Jupyter notebook
integration.

Features:
- Async project setup with non-blocking virtual environment creation
- Background package installation with progress indicators
- Enhanced Jupyter notebook support with auto kernel initialization
- Comprehensive environment diagnostics with actionable feedback
- Project templates for different Python workflows
- Interactive package browser with categories and search
- Robust error handling and recovery suggestions
- Performance optimizations with intelligent caching

==============================================================================
2. REQUIREMENTS                                         *pyworks-requirements*

Core Requirements:
- Neovim >= 0.9.0
- Python >= 3.8

For Notebook Support:
- jupytext CLI - Required to open/edit .ipynb files (auto-installed by pyworks)
- molten-nvim - Required for notebook execution (Neovim plugin dependency)

Optional:
- uv - For faster package management (10-100x faster than pip)

==============================================================================
3. INSTALLATION                                         *pyworks-installation*

Using lazy.nvim: >lua
  {
    "jeryldev/pyworks.nvim",
    dependencies = {
      "GCBallesteros/jupytext.nvim", -- For .ipynb files
      "benlubas/molten-nvim",       -- For notebooks
      "3rd/image.nvim",             -- For inline images
    },
    config = function()
      require("pyworks").setup()
    end,
  }
<

==============================================================================
4. COMMANDS                                                *pyworks-commands*

:PyworksSetup                                                  *:PyworksSetup*
    Interactive project setup with async operations. Choose from:
    - Data Science / Notebooks (with auto kernel init)
    - Web Development
    - General Python Development
    - Automation / Scripting
    - Custom
    
    Features:
    - Non-blocking virtual environment creation
    - Progress indicators for all operations
    - Automatic error recovery suggestions

:PyworksWeb                                                      *:PyworksWeb*
    Quick setup for web development projects (FastAPI/Flask/Django).

:PyworksData                                                    *:PyworksData*
    Quick setup for data science projects (alias for notebook setup).

:PyworksCheckEnvironment                            *:PyworksCheckEnvironment*
    Show comprehensive environment diagnostics:
    - Python version and paths
    - Virtual environment status
    - Installed packages
    - Jupyter/Molten integration

:PyworksInstallPackages {packages}               *:PyworksInstallPackages*
    Install Python packages asynchronously in the background.
    - Non-blocking operation with progress indicator
    - Continue coding while packages install
    - Clear error messages if installation fails
    Example: :PyworksInstallPackages pandas numpy matplotlib

:PyworksNewNotebook {filename} [language]               *:PyworksNewNotebook*
    Create a new Jupyter notebook with enhanced features.
    - filename: Name of the notebook (required)
    - language: Kernel language (default: python, also: julia, r)
    - Auto-initializes kernel for Python notebooks
    - Progress indicator during creation
    - Async file operations
    Example: :PyworksNewNotebook analysis.ipynb

:PyworksFixNotebook [filename]                          *:PyworksFixNotebook*
    Fix Jupyter notebook missing Python metadata.
    - filename: Optional path to notebook (default: current file)
    - Automatically adds language_info and kernelspec for Python
    - Fixes "attempt to concatenate field 'style'" errors
    Example: :PyworksFixNotebook
    Example: :PyworksFixNotebook path/to/notebook.ipynb

:PyworksShowEnvironment                          *:PyworksShowEnvironment*
    Show detailed Python environment status.

:PyworksBrowsePackages                          *:PyworksBrowsePackages*
    Interactive package browser with enhanced features:
    - Browse by category (Data Science, ML, Web Dev, etc.)
    - Package descriptions for each entry
    - Search functionality
    - Install entire categories at once
    - Smart navigation with back button

:PyworksDebug                                              *:PyworksDebug*
    Show debug information about pyworks configuration:
    - Current directory and venv path
    - Python host configuration
    - PATH environment status
    - jupytext availability
    Can manually fix configuration if needed.

Short aliases:
:PWSetup        Same as :PyworksSetup
:PWCheck        Same as :PyworksCheckEnvironment
:PWInstall      Same as :PyworksInstallPackages
:PWNewNotebook  Same as :PyworksNewNotebook

==============================================================================
5. KEYBINDINGS                                            *pyworks-keybindings*

Jupyter/Notebook keybindings:
<leader>ji      Initialize Jupyter kernel
<leader>jl      Evaluate current line
<leader>jv      Evaluate visual selection (works in visual and normal mode)
<leader>jr      Select current cell (visual selection)
<leader>je      Evaluate operator
<leader>jo      Open output window
<leader>jh      Hide output
<leader>jd      Delete cell output
<leader>js      Show kernel status/info
<leader>jc      Clear images

Package management keybindings:
<leader>pi      Install suggested packages (detected from imports)
<leader>pa      Analyze imports in current buffer

==============================================================================
6. CONFIGURATION                                              *pyworks-config*

Setup function accepts these options: >lua
  require("pyworks").setup({
    -- Python environment settings
    python = {
      preferred_venv_name = ".venv",  -- Virtual env folder name
      use_uv = true,                  -- Prefer uv when available
    },
    
    -- Molten/Jupyter output configuration (NEW!)
    molten = {
      virt_text_output = false,      -- Show output in window vs virtual text
      output_virt_lines = false,      -- Use virtual lines for output
      virt_lines_off_by_1 = false,    -- Offset output by 1 line
      output_win_max_height = 30,     -- Maximum output window height
      auto_open_output = true,        -- Auto show output after execution
      output_win_style = "minimal",   -- Window style: "minimal" or "none"
    },
    
    ui = {
      icons = {
        python = "üêç",
        success = "‚úì",
        error = "‚úó",
        warning = "‚ö†Ô∏è",
      },
    },
    
    auto_activate_venv = true,  -- Auto-activate in terminals
    -- Note: .nvim.lua is no longer created automatically
    -- Python host is configured by pyworks autocmds
  })
<

==============================================================================
7. WORKFLOW                                                  *pyworks-workflow*

Quick Start ~
1. Run :PyworksSetup in your project directory
2. Select project type (Data Science, Web, etc.)
3. Restart Neovim once (required only after initial setup)
4. Start coding! Everything is configured automatically

Automatic Features ~
When you open Neovim in a directory with .venv:
- Automatically adds .venv/bin to PATH
- Sets python3_host_prog to the venv Python  
- Activates venv in terminal buffers
- No manual activation needed!

==============================================================================
7. PROJECT TYPES                                           *pyworks-projects*

Data Science / Notebooks ~
- Packages: numpy, pandas, matplotlib, scikit-learn, jupyter, tensorflow
- Auto-configures Python host for Molten integration
- Full Jupyter notebook support with jupytext pre-installed

Web Development ~
- Packages: fastapi, flask, django, sqlalchemy, pytest, black, ruff
- Quick command: :PyworksWeb

General Python ~
- Packages: pytest, black, ruff, mypy, ipython, rich, typer
- Standard development tools

Automation / Scripting ~
- Packages: requests, beautifulsoup4, selenium, schedule
- Tools for automation tasks

Custom ~
- Choose your own packages
- Decide on Jupyter integration

==============================================================================
8. CELL NAVIGATION                                            *pyworks-cells*

For Python files with cell markers (# %%), pyworks provides navigation:

Keymaps ~
]j                      Jump to next cell
[j                      Jump to previous cell
<leader>jr              Run current cell (with Molten)
vi%                     Visual select current cell

Cell markers ~
Cells are defined by lines starting with "# %%" followed by optional text.
Example: >python
  # %% Import libraries
  import pandas as pd
  import numpy as np
  
  # %% Load data
  df = pd.read_csv('data.csv')
<

These keymaps work in both .py files and Jupyter notebooks.

==============================================================================
9. INTEGRATION                                          *pyworks-integration*

Molten.nvim ~
pyworks integrates deeply with molten-nvim for notebook execution:
- Automatic kernel initialization
- Cell execution with output display
- Inline image support via image.nvim
- Real-time output updates

Jupytext ~
Seamless conversion between .ipynb and .py files:
- Automatic sync between formats
- Preserves cell metadata
- Supports percent format (# %%)

Virtual Environments ~
pyworks automatically detects and activates:
- .venv (preferred)
- conda environments
- pyenv
- poetry
- pipenv

Terminal Integration ~
When auto_activate_venv is enabled:
- Automatically activates venv in new terminals
- Works with :terminal and toggleterm
- Preserves activation across sessions

==============================================================================
10. TROUBLESHOOTING                                  *pyworks-troubleshooting*

Virtual environment not detected? ~
Run :PyworksDebug to check and fix configuration.
Run :PyworksCheckEnvironment to see current status.
Make sure you're in the project root directory.

Python host not configured? ~
Run :PyworksDebug - it will automatically fix PATH and Python host.
pyworks now loads immediately on startup to ensure proper configuration.

Packages not installing? ~
Check :messages for installation progress.
Ensure virtual environment is activated.

Jupytext not found? ~
Run :PyworksDebug to check if jupytext is in PATH.
Jupytext is now installed automatically during initial setup.

Jupyter notebooks not working? ~
Verify Molten is installed and registered.
Run :PyworksCheckEnvironment to see Molten status.
Make sure you chose "Data Science" project type.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
