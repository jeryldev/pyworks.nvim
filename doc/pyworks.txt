*pyworks.txt*  Python environments tailored for Neovim

==============================================================================
CONTENTS                                                    *pyworks-contents*

1. Introduction ............................................. |pyworks-intro|
2. Requirements ............................................. |pyworks-requirements|
3. Installation ............................................. |pyworks-installation|
4. Commands ................................................. |pyworks-commands|
5. Configuration ............................................ |pyworks-config|
6. Project Types ............................................ |pyworks-projects|
7. Cell Navigation .......................................... |pyworks-cells|
8. Integration .............................................. |pyworks-integration|
9. Troubleshooting .......................................... |pyworks-troubleshooting|

==============================================================================
1. INTRODUCTION                                                *pyworks-intro*

pyworks.nvim is a comprehensive Python project management plugin for Neovim
that handles virtual environments, package installation, and Jupyter notebook
integration.

Features:
- Smart project setup with virtual environment creation
- Background package installation
- Jupyter notebook support (Python, Julia, R)
- Environment diagnostics
- Project templates for different Python workflows

==============================================================================
2. REQUIREMENTS                                         *pyworks-requirements*

- Neovim >= 0.9.0
- Python >= 3.8
- Optional: uv (for faster package management)
- Optional: molten-nvim (for Jupyter notebook execution)

==============================================================================
3. INSTALLATION                                         *pyworks-installation*

Using lazy.nvim: >lua
  {
    "jeryldev/pyworks.nvim",
    dependencies = {
      "benlubas/molten-nvim",       -- For notebooks
      "3rd/image.nvim",             -- For inline images
      "GCBallesteros/jupytext.nvim", -- For .ipynb files
    },
    config = function()
      require("pyworks").setup()
    end,
  }
<

==============================================================================
4. COMMANDS                                                *pyworks-commands*

:PyworksSetup                                                  *:PyworksSetup*
    Interactive project setup. Choose from:
    - Data Science / Notebooks
    - Web Development
    - General Python Development
    - Automation / Scripting
    - Custom

:PyworksWeb                                                      *:PyworksWeb*
    Quick setup for web development projects (FastAPI/Flask/Django).

:PyworksData                                                    *:PyworksData*
    Quick setup for data science projects (alias for notebook setup).

:PyworksCheckEnvironment                            *:PyworksCheckEnvironment*
    Show comprehensive environment diagnostics:
    - Python version and paths
    - Virtual environment status
    - Installed packages
    - Jupyter/Molten integration

:PyworksInstallPackages {packages}               *:PyworksInstallPackages*
    Install Python packages in the background.
    Example: :PyworksInstallPackages pandas numpy matplotlib

:PyworksNewNotebook {filename} [language]               *:PyworksNewNotebook*
    Create a new Jupyter notebook.
    - filename: Name of the notebook (required)
    - language: Kernel language (default: python, also: julia, r)
    Example: :PyworksNewNotebook analysis.ipynb

:PyworksShowEnvironment                          *:PyworksShowEnvironment*
    Show detailed Python environment status.

:PyworksBrowsePackages                          *:PyworksBrowsePackages*
    Browse common Python packages organized by category.

:PyworksDebug                                              *:PyworksDebug*
    Show debug information about pyworks configuration:
    - Current directory and venv path
    - Python host configuration
    - PATH environment status
    - jupytext availability
    Can manually fix configuration if needed.

Short aliases:
:PWSetup        Same as :PyworksSetup
:PWCheck        Same as :PyworksCheckEnvironment
:PWInstall      Same as :PyworksInstallPackages
:PWNewNotebook  Same as :PyworksNewNotebook

==============================================================================
5. CONFIGURATION                                              *pyworks-config*

Setup function accepts these options: >lua
  require("pyworks").setup({
    python = {
      preferred_venv_name = ".venv",  -- Virtual env folder name
      use_uv = true,                  -- Prefer uv when available
    },
    ui = {
      icons = {
        python = "üêç",
        success = "‚úì",
        error = "‚úó",
        warning = "‚ö†Ô∏è",
      },
    },
    auto_activate_venv = true,  -- Auto-activate in terminals
    create_nvim_lua = {         -- When to create .nvim.lua
      data_science = true,
      web = false,
      general = false,
      automation = false,
    },
  })
<

==============================================================================
6. PROJECT TYPES                                           *pyworks-projects*

Data Science / Notebooks ~
- Packages: numpy, pandas, matplotlib, scikit-learn, jupyter, tensorflow
- Creates .nvim.lua for Molten integration
- Full Jupyter notebook support

Web Development ~
- Packages: fastapi, flask, django, sqlalchemy, pytest, black, ruff
- Quick command: :PyworksWeb

General Python ~
- Packages: pytest, black, ruff, mypy, ipython, rich, typer
- Standard development tools

Automation / Scripting ~
- Packages: requests, beautifulsoup4, selenium, schedule
- Tools for automation tasks

Custom ~
- Choose your own packages
- Decide on Jupyter integration

==============================================================================
7. CELL NAVIGATION                                            *pyworks-cells*

For Python files with cell markers (# %%), pyworks provides navigation:

Keymaps ~
]j                      Jump to next cell
[j                      Jump to previous cell
<leader>jr              Run current cell (with Molten)
vi%                     Visual select current cell

Cell markers ~
Cells are defined by lines starting with "# %%" followed by optional text.
Example: >python
  # %% Import libraries
  import pandas as pd
  import numpy as np
  
  # %% Load data
  df = pd.read_csv('data.csv')
<

These keymaps work in both .py files and Jupyter notebooks.

==============================================================================
8. INTEGRATION                                          *pyworks-integration*

Molten.nvim ~
pyworks integrates deeply with molten-nvim for notebook execution:
- Automatic kernel initialization
- Cell execution with output display
- Inline image support via image.nvim
- Real-time output updates

Jupytext ~
Seamless conversion between .ipynb and .py files:
- Automatic sync between formats
- Preserves cell metadata
- Supports percent format (# %%)

Virtual Environments ~
pyworks automatically detects and activates:
- .venv (preferred)
- conda environments
- pyenv
- poetry
- pipenv

Terminal Integration ~
When auto_activate_venv is enabled:
- Automatically activates venv in new terminals
- Works with :terminal and toggleterm
- Preserves activation across sessions

==============================================================================
9. TROUBLESHOOTING                                   *pyworks-troubleshooting*

Virtual environment not detected? ~
Run :PyworksCheckEnvironment to see current status.
Make sure you're in the project root directory.

Packages not installing? ~
Check :messages for installation progress.
Ensure virtual environment is activated.

Jupyter notebooks not working? ~
Verify Molten is installed and registered.
Run :PyworksCheckEnvironment to see Molten status.
Make sure you chose "Data Science" project type.

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
